# -*- coding: utf-8 -*-

import sling
import sling.task.corpora
import sling.flags as flags
import sys
import math

flags.parse()

# Initialize knowledge base.
kb = sling.Store()
kb.load("local/data/e/wiki/kb.sling")
n_qua = kb["is"]
n_lang = kb["lang"]
n_instance_of = kb["P31"]
n_unit_symbol = kb["P5061"]
n_si_base_unit = kb["Q223662"]
n_si_derived_unit = kb["Q208469"]
n_si_prefix = kb["Q131299"]
n_numeric_value = kb["P1181"]

# Unit types.
unit_types = {
  kb["Q1371562"],    # unit of area
  kb["Q10387685"],   # unit of density
  kb["Q2916980"],    # unit of energy
  kb["Q15976022"],   # unit of force
  kb["Q1978718"],    # unit of length
  kb["Q3647172"],    # unit of mass
  kb["Q15222637"],   # unit of speed
  kb["Q2394680"],    # unit of temperature
  kb["Q1302471"],    # unit of volume
  kb["Q4173969"],    # unit of pressure
  kb["Q10387689"],   # unit of power

  kb["Q13587321"],   # unit of angle
  kb["Q16604158"],   # unit of charge
  kb["Q1790144"],    # unit of time
  kb["Q2360980"],    # unit of amount
}

# Black-listed unknown that conflict with other more important units.
blacklist = [
  kb["Q27949241"],  # R vs Réaumur
  kb["Q1396128"],   # faraday (F) vs Fahrenheit
  kb["Q25406"],     # coulomb (C) vs Celcius
  kb["Q1798227"],   # decimal degree (°) vs arcdegree
  kb["Q217208"],    # Julian year (a) vs are
  kb["Q1092296"],   # annum (a) vs are
  kb["Q12714022"],  # short hundredweight (cwt) vs barrel
  kb["Q32751296"],  # dry barrel (bbl) vs are
  kb["Q2642547"],   # hectoannum (ha) vs hectare
  kb["Q39360471"],  # nautical leagues (nl) vs nanolitre
  kb["Q23925410"],  # UK gallon (gal) vs US gallon
  kb["Q1472674"],   # svedberg (S) vs spat
  kb["Q577"],       # curtis (a) vs are
  kb["Q39462709"],  # square inches (in2) vs square inch
  kb["Q1086691"],   # frigorie (fg) vs femtogram
  kb["Q37732658"],  # rankine (°R) vs réaumur
  kb["Q420266"],    # UK fluid ounce (fl oz) vs US fluid ounce
]

# Trim unit.
def trim_unit(unit):
  if unit == "°": return unit
  unit = unit.replace("²", "2")
  unit = unit.replace("³", "3")
  unit = unit.replace("°", "")
  return unit

# Determine unit scaling factor for sqaure and cubic units.
def unit_factor(unit, power):
  factor = math.pow(10, power)
  end = unit.find("/")
  if end == -1: end = len(unit)
  if end > 0:
    if unit[end - 1] == "2":
      factor = factor * factor
    elif unit[end - 1] == "3":
      factor = factor * factor * factor
  return factor

# Escape string.
def escape(s):
  return s.replace('"', '\\"')

# Create output file.
language = kb["/lang/" + flags.arg.language]
f = open("data/wiki/units-" + language.code + ".sling", "w")
f.write("; Units for " + language.name + " (" + language.code + ").\n")
f.write("; Generated by " + sys.argv[0] + ".\n")
f.write("{=/w/units/" + language.code + "\n")

units = {}
si_units = []
si_prefixes = []

# Find all units in the knowledge base.
for item in kb:
  # Check if item is a unit.
  is_unit = False
  is_si_prefix = False
  for t in item(n_instance_of):
    if t in unit_types: is_unit = True
    if t == n_si_prefix: is_si_prefix = True

  # Collect SI prefixes.
  if is_si_prefix:
    value = item[n_numeric_value]
    prefix = None
    for symbol in item(n_unit_symbol):
      prefix = symbol
      lang = None
      while type(prefix) is not str:
        lang = prefix[n_lang]
        prefix = prefix[n_qua]
      if lang == language:
        si_prefixes.append((prefix, int(math.log10(value)), item.name))

  if not is_unit: continue
  if item in blacklist: continue

  # Check if it is a SI unit.
  si = False
  for t in item(n_instance_of):
    if t == n_si_base_unit or t == n_si_derived_unit:
      si = True
  if si: si_units.append(item)

  # Output units for each language here we have a unit symbol.
  for symbol in item(n_unit_symbol):
    unit = symbol
    lang = None
    while type(unit) is not str:
      lang = unit[n_lang]
      unit = unit[n_qua]

    unit = trim_unit(unit)
    if lang != language and lang != None: continue

    #print "unit:", unit
    if unit in units:
      print "Ambiguity:", unit, units[unit].id, "vs", item.id
    else:
      f.write('  "' + escape(unit) + '": {/w/unit: ' + item.id +
              ' name: \"' + item.name + '"}\n')
      units[unit] = item

# Add units with SI prefixes.
for item in si_units:
  for symbol in item(n_unit_symbol):
    unit = symbol
    lang = None
    while type(unit) is not str:
      lang = unit[n_lang]
      unit = unit[n_qua]

    unit = trim_unit(unit)
    if lang != language and lang != None: continue

    for prefix, power, name in si_prefixes:
      punit = prefix + unit
      if punit not in units:
        f.write('  "' + escape(punit) + '": {/w/unit: ' + item.id +
                ' name: "' + name + item.name + '"' +
                ' /w/amount: ' + str(unit_factor(punit, power)) + '}\n')
        units[punit] = item

f.write("}\n")
f.close()

